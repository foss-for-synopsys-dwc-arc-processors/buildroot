From 05e27a1223ff40073949fd57cb22b66c830f1b5c Mon Sep 17 00:00:00 2001
From: Alexey Brodkin <abrodkin@synopsys.com>
Date: Fri, 1 Apr 2016 17:19:09 +0300
Subject: [PATCH 7/9] drm: arcpgu: fix differences with 4.4 base

ARC PGU driver applied before is based on top of v4.5+
and so there're some differences functoin prototypes.

Also in v4.4 connector_{register|unregister}_all() are missing
so adding it only in ARC PGU driver.

Signed-off-by: Alexey Brodkin <abrodkin@synopsys.com>
---
 drivers/gpu/drm/arc/arcpgu_crtc.c |  4 +--
 drivers/gpu/drm/arc/arcpgu_drv.c  | 58 +++++++++++++++++++++++++++++++++++++++
 drivers/gpu/drm/arc/arcpgu_hdmi.c |  2 +-
 3 files changed, 61 insertions(+), 3 deletions(-)

diff --git a/drivers/gpu/drm/arc/arcpgu_crtc.c b/drivers/gpu/drm/arc/arcpgu_crtc.c
index 92f8bef..5e07f28 100644
--- a/drivers/gpu/drm/arc/arcpgu_crtc.c
+++ b/drivers/gpu/drm/arc/arcpgu_crtc.c
@@ -225,7 +225,7 @@ static struct drm_plane *arc_pgu_plane_init(struct drm_device *drm)
 
 	ret = drm_universal_plane_init(drm, plane, 0xff, &arc_pgu_plane_funcs,
 				       formats, ARRAY_SIZE(formats),
-				       DRM_PLANE_TYPE_PRIMARY, NULL);
+				       DRM_PLANE_TYPE_PRIMARY);
 	if (ret)
 		return ERR_PTR(ret);
 
@@ -246,7 +246,7 @@ int arc_pgu_setup_crtc(struct drm_device *drm)
 		return PTR_ERR(primary);
 
 	ret = drm_crtc_init_with_planes(drm, &arcpgu->crtc, primary, NULL,
-					&arc_pgu_crtc_funcs, NULL);
+					&arc_pgu_crtc_funcs);
 	if (ret) {
 		arc_pgu_plane_destroy(primary);
 		return ret;
diff --git a/drivers/gpu/drm/arc/arcpgu_drv.c b/drivers/gpu/drm/arc/arcpgu_drv.c
index 5b35e5db..da61a33 100644
--- a/drivers/gpu/drm/arc/arcpgu_drv.c
+++ b/drivers/gpu/drm/arc/arcpgu_drv.c
@@ -212,6 +212,64 @@ static struct drm_driver arcpgu_drm_driver = {
 	.gem_prime_mmap = drm_gem_cma_prime_mmap,
 };
 
+/**
+ * drm_connector_unregister_all - unregister connector userspace interfaces
+ * @dev: drm device
+ *
+ * This functions unregisters all connectors from sysfs and other places so
+ * that userspace can no longer access them. Drivers should call this as the
+ * first step tearing down the device instace, or when the underlying
+ * physical device disappeared (e.g. USB unplug), right before calling
+ * drm_dev_unregister().
+ */
+static void drm_connector_unregister_all(struct drm_device *dev)
+{
+	struct drm_connector *connector;
+
+	/* FIXME: taking the mode config mutex ends up in a clash with sysfs */
+	drm_for_each_connector(connector, dev)
+		drm_connector_unregister(connector);
+}
+
+/**
+ * drm_connector_register_all - register all connectors
+ * @dev: drm device
+ *
+ * This function registers all connectors in sysfs and other places so that
+ * userspace can start to access them. Drivers can call it after calling
+ * drm_dev_register() to complete the device registration, if they don't call
+ * drm_connector_register() on each connector individually.
+ *
+ * When a device is unplugged and should be removed from userspace access,
+ * call drm_connector_unregister_all(), which is the inverse of this
+ * function.
+ *
+ * Returns:
+ * Zero on success, error code on failure.
+ */
+static int drm_connector_register_all(struct drm_device *dev)
+{
+	struct drm_connector *connector;
+	int ret;
+
+	mutex_lock(&dev->mode_config.mutex);
+
+	drm_for_each_connector(connector, dev) {
+		ret = drm_connector_register(connector);
+		if (ret)
+			goto err;
+	}
+
+	mutex_unlock(&dev->mode_config.mutex);
+
+	return 0;
+
+err:
+	mutex_unlock(&dev->mode_config.mutex);
+	drm_connector_unregister_all(dev);
+	return ret;
+}
+
 static int arcpgu_probe(struct platform_device *pdev)
 {
 	struct drm_device *drm;
diff --git a/drivers/gpu/drm/arc/arcpgu_hdmi.c b/drivers/gpu/drm/arc/arcpgu_hdmi.c
index 08b6bae..eb1b70d 100644
--- a/drivers/gpu/drm/arc/arcpgu_hdmi.c
+++ b/drivers/gpu/drm/arc/arcpgu_hdmi.c
@@ -158,7 +158,7 @@ int arcpgu_drm_hdmi_init(struct drm_device *drm, struct device_node *np)
 	encoder->base.possible_crtcs = 1;
 	encoder->base.possible_clones = 0;
 	ret = drm_encoder_init(drm, &encoder->base, &arcpgu_drm_encoder_funcs,
-			       DRM_MODE_ENCODER_TMDS, NULL);
+			       DRM_MODE_ENCODER_TMDS);
 	if (ret)
 		return ret;
 
-- 
2.5.5

