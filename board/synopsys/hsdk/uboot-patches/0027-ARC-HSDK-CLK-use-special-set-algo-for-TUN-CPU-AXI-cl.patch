From 8b613fc71f273e61ece1a752aaad01878749720f Mon Sep 17 00:00:00 2001
From: Eugeniy Paltsev <Eugeniy.Paltsev@synopsys.com>
Date: Fri, 22 Dec 2017 13:39:54 +0300
Subject: [PATCH 27/46] ARC: HSDK: CLK: use special set algo for TUN, CPU, AXI
 clocks

use special set algo for TUN, CPU, AXI clocks
add support for ROM and PWM clocks

Signed-off-by: Eugeniy Paltsev <Eugeniy.Paltsev@synopsys.com>
---
 drivers/clk/clk-hsdk-cgu.c | 119 +++++++++++++++++++++++++++++++++------------
 1 file changed, 87 insertions(+), 32 deletions(-)

diff --git a/drivers/clk/clk-hsdk-cgu.c b/drivers/clk/clk-hsdk-cgu.c
index 047bc14681..61926656d9 100644
--- a/drivers/clk/clk-hsdk-cgu.c
+++ b/drivers/clk/clk-hsdk-cgu.c
@@ -44,7 +44,9 @@
  *            |-->| TUNNEL PLL |
  *            |   --------------
  *            |        |
- *            |        |-->|CGU_TUN_IDIV|----------->
+ *            |        |-->|CGU_TUN_IDIV_TUN|----------->
+ *            |        |-->|CGU_TUN_IDIV_ROM|----------->
+ *            |        |-->|CGU_TUN_IDIV_PWM|----------->
  *            |
  *            |   ------------
  *            |-->| HDMI PLL |
@@ -62,7 +64,9 @@
 DECLARE_GLOBAL_DATA_PTR;
 
 #define CGU_ARC_IDIV		0x080
-#define CGU_TUN_IDIV		0x380
+#define CGU_TUN_IDIV_TUN	0x380
+#define CGU_TUN_IDIV_ROM	0x390
+#define CGU_TUN_IDIV_PWM	0x3A0
 #define CGU_HDMI_IDIV_APB	0x480
 #define CGU_SYS_IDIV_APB	0x180
 #define CGU_SYS_IDIV_AXI	0x190
@@ -118,41 +122,64 @@ DECLARE_GLOBAL_DATA_PTR;
 
 #define MIN_PLL_RATE			100000000 /* 100 MHz */
 #define PARENT_RATE			33333333 /* fixed clock - xtal */
-#define CGU_MAX_CLOCKS			24
+#define CGU_MAX_CLOCKS			26
 
 #define CGU_SYS_CLOCKS			16
 #define MAX_AXI_CLOCKS			4
 
-struct hsdk_idiv_cfg {
+#define CGU_TUN_CLOCKS			3
+#define MAX_TUN_CLOCKS			6
+
+struct hsdk_tun_idiv_cfg {
+	u32 oft;
+	u8  val[MAX_TUN_CLOCKS];
+};
+
+struct hsdk_tun_clk_cfg {
+	const u32 clk_rate[MAX_TUN_CLOCKS];
+	const u32 pll_rate[MAX_TUN_CLOCKS];
+	const struct hsdk_tun_idiv_cfg idiv[CGU_TUN_CLOCKS];
+};
+
+static const struct hsdk_tun_clk_cfg tun_clk_cfg = {
+	{ 25000000,  50000000,  75000000,  100000000, 125000000, 150000000 },
+	{ 600000000, 600000000, 600000000, 600000000, 700000000, 600000000 }, {
+	{ CGU_TUN_IDIV_TUN,	{ 24,	12,	8,	6,	6,	4 } },
+	{ CGU_TUN_IDIV_ROM,	{ 4,	4,	4,	4,	5,	4 } },
+	{ CGU_TUN_IDIV_PWM,	{ 8,	8,	8,	8,	10,	8 } }
+	}
+};
+
+struct hsdk_sys_idiv_cfg {
 	u32 oft;
 	u8  val[MAX_AXI_CLOCKS];
 };
 
-struct hsdk_clk_cfg {
+struct hsdk_axi_clk_cfg {
 	const u32 clk_rate[MAX_AXI_CLOCKS];
 	const u32 pll_rate[MAX_AXI_CLOCKS];
-	const struct hsdk_idiv_cfg idiv[CGU_SYS_CLOCKS];
+	const struct hsdk_sys_idiv_cfg idiv[CGU_SYS_CLOCKS];
 };
 
-static const struct hsdk_clk_cfg axi_clk_cfg = {
+static const struct hsdk_axi_clk_cfg axi_clk_cfg = {
 	{ 200000000,	400000000,	600000000,	800000000 },
-	{ 400000000,	400000000,	600000000,	800000000 }, {
-	{ CGU_SYS_IDIV_APB,	 { 2,	2,	3,	4 } },	/* APB */
-	{ CGU_SYS_IDIV_AXI,	 { 2,	1,	1,	1 } },	/* AXI */
-	{ CGU_SYS_IDIV_ETH,	 { 1,	1,	2,	2 } },	/* ETH */
-	{ CGU_SYS_IDIV_USB,	 { 1,	1,	2,	2 } },	/* USB */
-	{ CGU_SYS_IDIV_SDIO,	 { 1,	1,	2,	2 } },	/* SDIO */
-	{ CGU_SYS_IDIV_HDMI,	 { 1,	1,	2,	2 } },	/* HDMI */
-	{ CGU_SYS_IDIV_GFX_CORE, { 1,	1,	2,	2 } },	/* GPU-CORE */
-	{ CGU_SYS_IDIV_GFX_DMA,	 { 1,	1,	2,	2 } },	/* GPU-DMA */
-	{ CGU_SYS_IDIV_GFX_CFG,	 { 2,	2,	3,	4 } },	/* GPU-CFG */
-	{ CGU_SYS_IDIV_DMAC_CORE,{ 1,	1,	2,	2 } },	/* DMAC-CORE */
-	{ CGU_SYS_IDIV_DMAC_CFG, { 2,	2,	3,	4 } },	/* DMAC-CFG */
-	{ CGU_SYS_IDIV_SDIO_REF, { 4,	4,	6,	8 } },	/* SDIO-REF */
-	{ CGU_SYS_IDIV_SPI_REF,	 { 12,	12,	18,	24 } },	/* SPI-REF */
-	{ CGU_SYS_IDIV_I2C_REF,	 { 2,	2,	3,	4 } },	/* I2C-REF */
-	{ CGU_SYS_IDIV_UART_REF, { 12,	12,	18,	24 } },	/* UART-REF */
-	{ CGU_SYS_IDIV_EBI_REF,	 { 8,	8,	12,	16 } }	/* EBI-REF */
+	{ 800000000,	800000000,	600000000,	800000000 }, {
+	{ CGU_SYS_IDIV_APB,	 { 4,	4,	3,	4 } },	/* APB */
+	{ CGU_SYS_IDIV_AXI,	 { 4,	2,	1,	1 } },	/* AXI */
+	{ CGU_SYS_IDIV_ETH,	 { 2,	2,	2,	2 } },	/* ETH */
+	{ CGU_SYS_IDIV_USB,	 { 2,	2,	2,	2 } },	/* USB */
+	{ CGU_SYS_IDIV_SDIO,	 { 2,	2,	2,	2 } },	/* SDIO */
+	{ CGU_SYS_IDIV_HDMI,	 { 2,	2,	2,	2 } },	/* HDMI */
+	{ CGU_SYS_IDIV_GFX_CORE, { 1,	1,	1,	1 } },	/* GPU-CORE */
+	{ CGU_SYS_IDIV_GFX_DMA,	 { 2,	2,	2,	2 } },	/* GPU-DMA */
+	{ CGU_SYS_IDIV_GFX_CFG,	 { 4,	4,	3,	4 } },	/* GPU-CFG */
+	{ CGU_SYS_IDIV_DMAC_CORE,{ 2,	2,	2,	2 } },	/* DMAC-CORE */
+	{ CGU_SYS_IDIV_DMAC_CFG, { 4,	4,	3,	4 } },	/* DMAC-CFG */
+	{ CGU_SYS_IDIV_SDIO_REF, { 8,	8,	6,	8 } },	/* SDIO-REF */
+	{ CGU_SYS_IDIV_SPI_REF,	 { 24,	24,	18,	24 } },	/* SPI-REF */
+	{ CGU_SYS_IDIV_I2C_REF,	 { 4,	4,	3,	4 } },	/* I2C-REF */
+	{ CGU_SYS_IDIV_UART_REF, { 24,	24,	18,	24 } },	/* UART-REF */
+	{ CGU_SYS_IDIV_EBI_REF,	 { 16,	16,	12,	16 } }	/* EBI-REF */
 	}
 };
 
@@ -280,9 +307,13 @@ static const struct hsdk_cgu_clock_map clock_map[] = {
 	{ CGU_SYS_PLL, 0, CGU_SYS_IDIV_UART_REF, &sdt_pll_dat, idiv_get, idiv_set, idiv_off },
 	{ CGU_SYS_PLL, 0, CGU_SYS_IDIV_EBI_REF, &sdt_pll_dat, idiv_get, idiv_set, idiv_off },
 	{ CGU_TUN_PLL, 0, 0, &sdt_pll_dat, pll_get, pll_set, NULL },
-	{ CGU_TUN_PLL, 0, CGU_TUN_IDIV, &sdt_pll_dat, idiv_get, tun_clk_set, idiv_off },	/* special behavior */
+	{ CGU_TUN_PLL, 0, CGU_TUN_IDIV_TUN, &sdt_pll_dat, idiv_get, tun_clk_set, idiv_off },	/* special behavior */
 	{ CGU_HDMI_PLL, 0, 0, &hdmi_pll_dat, pll_get, pll_set, NULL },
-	{ CGU_HDMI_PLL, 0, CGU_HDMI_IDIV_APB, &hdmi_pll_dat, idiv_get, idiv_set, idiv_off }
+	{ CGU_HDMI_PLL, 0, CGU_HDMI_IDIV_APB, &hdmi_pll_dat, idiv_get, idiv_set, idiv_off },
+
+	/* TODO: move in right place */
+	{ CGU_TUN_PLL, 0, CGU_TUN_IDIV_ROM, &sdt_pll_dat, idiv_get, idiv_set, idiv_off },
+	{ CGU_TUN_PLL, 0, CGU_TUN_IDIV_PWM, &sdt_pll_dat, idiv_get, idiv_set, idiv_off }
 };
 
 static inline void hsdk_idiv_write(struct hsdk_cgu_clk *clk, u32 val)
@@ -547,14 +578,38 @@ static ulong axi_clk_set(struct clk *sclk, ulong rate)
 
 static ulong tun_clk_set(struct clk *sclk, ulong rate)
 {
-	ulong ret;
+	struct hsdk_cgu_clk *clk = dev_get_priv(sclk->dev);
+	ulong pll_rate;
+	int i, freq_idx = -1;
+	ulong ret = 0;
+
+	pll_rate = pll_get(sclk);
 
-	if (rate >= MIN_PLL_RATE)
-		ret = pll_set(sclk, rate);
-	else
-		ret = pll_set(sclk, 150000000);
+	for (i = 0; i < MAX_TUN_CLOCKS; i++) {
+		if (tun_clk_cfg.clk_rate[i] == rate) {
+			freq_idx = i;
+			break;
+		}
+	}
 
-	idiv_set(sclk, rate);
+	if (freq_idx < 0) {
+		pr_err("tun clk: invalid rate=%ld Hz\n", rate);
+		return -EINVAL;
+	}
+
+	/* configure PLL before dividers */
+	if (tun_clk_cfg.pll_rate[freq_idx] < pll_rate)
+		ret = pll_set(sclk, tun_clk_cfg.pll_rate[freq_idx]);
+
+	/* configure SYS dividers */
+	for (i = 0; i < CGU_TUN_CLOCKS; i++) {
+		clk->idiv_regs = clk->cgu_regs + tun_clk_cfg.idiv[i].oft;
+		hsdk_idiv_write(clk, tun_clk_cfg.idiv[i].val[freq_idx]);
+	}
+
+	/* configure PLL after dividers */
+	if (tun_clk_cfg.pll_rate[freq_idx] >= pll_rate)
+		ret = pll_set(sclk, tun_clk_cfg.pll_rate[freq_idx]);
 
 	return ret;
 }
-- 
2.11.0

